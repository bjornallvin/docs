{"version":3,"sources":["components/Label/index.js","components/ProgressBar/index.js","components/TextInput/index.js","docs/examples/EyeIcon/Example.js","components/EyeIcon/index.js","docs/examples/HelloWorld/ExampleHelloWorld.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/Label/ExampleThemed.js","docs/examples/PasswordInput/ExampleAllFeatures.js","components/PasswordInput/index.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","index.js","docs/Docs.js","docs/Navigation.js","docs/ComponentPage.js","docs/Example.js","docs/CodeExample.js","docs/examples sync /^/.//.*$","components/EyeIcon/EyeIcon.js","components/HelloWorld/index.js","components/HelloWorld/HelloWorld.js","components/Label/Label.js","components/PasswordInput/PasswordInput.js","components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js","components/RegistrationForm/index.js","components/RegistrationForm/RegistrationForm.js","docs/Props.js","../config/componentData.js","serviceWorker.js"],"names":["message","htmlFor","label","required","ThemeProvider","theme","blueTheme","greenTheme","mainColor","props","useState","password","setPassword","htmlId","name","onChange","event","target","value","minLength","placeholder","showVisibilityToggle","quality","length","getQuality","percent","width","heigth","onSubmit","user","console","log","ExampleError","error","React","Component","ExampleOptional","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","unregister","window","location","hash","substr","route","setRoute","useEffect","addEventListener","component","componentData","filter","components","map","Ul","styled","ul","key","href","Wrapper","div","description","examples","example","componentName","ExampleWrapper","showCode","setShowCode","code","ExampleComponent","require","default","onClick","preventDefault","element","useRef","hljs","registerLanguage","javascript","highlightBlock","current","ref","children","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","keys","Object","resolve","module","exports","height","xmlns","viewBox","transform","fill","d","cx","cy","r","HelloWorld","defaultProps","StyledLabel","RequiredSpan","span","PasswordInput","showPassword","setShowPassword","maxLength","rest","type","style","marginLeft","OuterWrapper","InnerWrapper","parseInt","ProgressBar","marginBottom","border","className","color","RegistrationForm","email","setUser","errors","setErrors","submitted","setSubmitted","confirmationMessage","minPasswordLength","formErrors","getOwnPropertyNames","validate","PropsTable","table","defaultValue","config","navigator","URL","process","origin","swUrl","isLocalhost","fetch","headers","then","response","contentType","get","status","indexOf","ready","registration","reload","registerValidSW","catch","checkValidServiceWorker","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess"],"mappings":"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","file":"static/js/main.ad239c3c.chunk.js","sourcesContent":["export { default } from \"./Label\"","export { default } from \"./ProgressBar\"","export {default} from './TextInput';\n","import React from 'react';\nimport EyeIcon from 'bjorn-comps/EyeIcon'\n\n/** EyeIcon example */\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","export {default} from './EyeIcon';\n","import React from 'react'\nimport HelloWorld from \"bjorn-comps/HelloWorld\"\n\nexport default function ExampleHelloWorld() {\n    return (\n        <HelloWorld message=\"Hello there!\" />\n    )\n}\n","import React from 'react';\nimport Label from 'bjorn-comps/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n","import React from 'react';\nimport Label from 'bjorn-comps/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}\n","import React from 'react';\nimport { ThemeProvider } from \"styled-components\"\nimport Label from 'bjorn-comps/Label';\n\nconst blueTheme = {\n  mainColor: \"blue\",\n}\nconst greenTheme = {\n  mainColor: \"green\",\n}\n\n/** With theme color provided */\nexport default function ExampleOptional() {\n  return (\n    <>\n      <ThemeProvider theme={blueTheme}>\n        <Label htmlFor=\"test\" label=\"Blue theme label\" />\n      </ThemeProvider>\n      <ThemeProvider theme={greenTheme}>\n        <Label htmlFor=\"test2\" label=\"Green theme label\" />\n      </ThemeProvider>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport PasswordInput from 'bjorn-comps/PasswordInput';\n\n/** All features enabled */\nconst ExampleAllFeatures = (props) => {\n\n  const [password, setPassword] = useState('');\n\n  const getQuality = () => {\n    const length = password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n\n  return (\n    <div>\n      <PasswordInput\n        htmlId=\"password-input-example-all-features\"\n        name=\"password\"\n        onChange={event => setPassword(event.target.value)}\n        value={password}\n        minLength={8}\n        placeholder=\"Enter password\"\n        showVisibilityToggle\n        quality={getQuality()}\n        {...props} />\n    </div>\n  )\n}\n\n\nexport default ExampleAllFeatures;\n","export {default} from './PasswordInput';\n","import React from 'react'\nimport ProgressBar from \"bjorn-comps/ProgressBar\"\n\nexport default function Example100Percent() {\n    return (\n        <ProgressBar percent={100} width={200} />\n    )\n}\n","import React from 'react'\nimport ProgressBar from \"bjorn-comps/ProgressBar\"\n\n/** 10 percent progress */\nexport default function Example10Percent() {\n    return (\n        <ProgressBar percent={10} width={200} heigth={20} />\n    )\n}\n","import React from 'react'\nimport ProgressBar from \"bjorn-comps/ProgressBar\"\n\nexport default function Example70Percent() {\n    return (\n        <ProgressBar percent={70} width={200} />\n    )\n}\n","import React from 'react';\nimport RegistrationForm from 'bjorn-comps/RegistrationForm';\n\nconst ExampleRegistrationForm = () => {\n\n  const onSubmit = (user) => {\n    console.log(user);\n  }\n\n  return <RegistrationForm onSubmit={onSubmit} />\n}\n\nexport default ExampleRegistrationForm","import React from 'react';\nimport TextInput from 'bjorn-comps/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => { }}\n        required\n        error=\"First name is required.\"\n      />\n    )\n  }\n}\n","import React from 'react';\nimport TextInput from 'bjorn-comps/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => { }}\n      />\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/highlight.js/styles/ocean.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react'\n\nimport Navigation from \"./Navigation\"\nimport ComponentPage from \"./ComponentPage\"\nimport componentData from '../../config/componentData';\n\nexport default function Docs() {\n\n    const [route, setRoute] = useState(window.location.hash.substr(1))\n\n    useEffect(() => {\n        window.addEventListener('hashchange', () => {\n            setRoute(window.location.hash.substr(1));\n        })\n    }, [])\n\n    const component = route ? componentData.filter(component => component.name === route)[0] : componentData[0];\n\n    return (\n        <div>\n            <Navigation components={componentData.map(component => component.name)} />\n            <ComponentPage component={component} />\n\n        </div>\n    )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nconst Ul = styled.ul`\n  float: left;\n  width: 250px;\n  list-style-type: none;\n  padding: 0;\n`\n\nconst Navigation = ({ components }) => {\n  return (\n    <Ul>\n      {\n        components.map(name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </Ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nimport Example from './Example';\nimport Props from './Props';\n\nconst Wrapper = styled.div`\n  margin-left: 275px;\n`\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <Wrapper>\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n          examples.map(example => <Example key={example.name} example={example} componentName={name} />) :\n          \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n          <Props props={props} /> :\n          \"This component accepts no props.\"\n      }\n    </Wrapper>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nimport CodeExample from './CodeExample';\n\nconst ExampleWrapper = styled.div`\n  border: solid 1px #d3d3d3;\n  padding: 16px;\n  margin-bottom: 16px;\n  background-color: #f4f6f9;\n  h4:first-of-type {\n    margin-top: 0;\n  }\n  p:last-of-type {\n    margin-bottom: 0;\n  }\n`\n\n\nconst Example = ({ example, componentName }) => {\n\n  const [showCode, setShowCode] = useState(false);\n\n  const toggleCode = event => {\n    event.preventDefault();\n    setShowCode(!showCode);\n  }\n\n  const { code, description, name } = example;\n\n  // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n  const ExampleComponent = require(`./examples/${componentName}/${name}`).default;\n\n  return (\n    <ExampleWrapper>\n      {description && <h4>{description}</h4>}\n\n      <ExampleComponent />\n\n      <p>\n        <button onClick={toggleCode}>\n          {showCode ? \"Hide\" : \"Show\"} Code\n          </button>\n      </p>\n\n      {showCode && <CodeExample>{code}</CodeExample>}\n    </ExampleWrapper>\n  )\n\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/core'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nconst CodeExample = (props) => {\n\n  const element = useRef(null)\n\n  useEffect(() => {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(element.current);\n\n  }, [])\n\n\n  return (\n    <pre ref={element}>\n      <code>\n        {props.children}\n      </code>\n    </pre>\n  )\n\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","var map = {\n\t\"./EyeIcon/Example\": 17,\n\t\"./EyeIcon/Example.js\": 17,\n\t\"./HelloWorld/ExampleHelloWorld\": 19,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 19,\n\t\"./Label/ExampleOptional\": 20,\n\t\"./Label/ExampleOptional.js\": 20,\n\t\"./Label/ExampleRequired\": 21,\n\t\"./Label/ExampleRequired.js\": 21,\n\t\"./Label/ExampleThemed\": 22,\n\t\"./Label/ExampleThemed.js\": 22,\n\t\"./PasswordInput/ExampleAllFeatures\": 23,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 23,\n\t\"./ProgressBar/Example100Percent\": 25,\n\t\"./ProgressBar/Example100Percent.js\": 25,\n\t\"./ProgressBar/Example10Percent\": 26,\n\t\"./ProgressBar/Example10Percent.js\": 26,\n\t\"./ProgressBar/Example70Percent\": 27,\n\t\"./ProgressBar/Example70Percent.js\": 27,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 28,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 28,\n\t\"./TextInput/ExampleError\": 29,\n\t\"./TextInput/ExampleError.js\": 29,\n\t\"./TextInput/ExampleOptional\": 32,\n\t\"./TextInput/ExampleOptional.js\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 73;","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","export { default } from \"./HelloWorld\"","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * A Descriotion\n */\nexport default function HelloWorld({ message }) {\n    return (\n        <div>\n            {message}\n        </div>\n    )\n}\n\nHelloWorld.propTypes = {\n    /**\n     * Message to display\n     */\n    message: PropTypes.string\n}\n\nHelloWorld.defaultProps = {\n    message: \"Howdy\"\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nconst StyledLabel = styled.label`\n    display: block;\n    color: ${props => props.theme.mainColor || 'black'};\n`\nconst RequiredSpan = styled.span`\n    color: red;\n`\n\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({ htmlFor, label, required }) {\n    return (\n        <StyledLabel htmlFor={htmlFor}>\n            {label} {required && <RequiredSpan> *</RequiredSpan>}\n        </StyledLabel>\n    )\n}\n\nLabel.propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n\n    /** Label text */\n    label: PropTypes.string.isRequired,\n\n    /** Display asterisk after label if true */\n    required: PropTypes.bool\n};\n\nexport default Label;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nconst PasswordInput = props => {\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = event => {\n    setShowPassword(!showPassword);\n    if (event) event.preventDefault();\n  };\n\n\n  const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...rest } = props;\n\n\n  return (\n\n    <TextInput\n      htmlId={htmlId}\n      label={label}\n      placeholder={placeholder}\n      type={showPassword ? 'text' : 'password'}\n      onChange={onChange}\n      value={value}\n      maxLength={maxLength}\n      error={error}\n      required\n      {...rest}>\n      {\n        showVisibilityToggle &&\n        <a\n          href=\"#\"\n          onClick={toggleShowPassword}\n          style={{ marginLeft: 5 }}>\n          <EyeIcon />\n        </a>\n      }\n      {\n        value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n      }\n    </TextInput>\n  );\n\n}\n\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\n\nconst OuterWrapper = styled.div`\n    border-style:solid;\n    border-width:1px;\n    border-color:black;\n    width: ${(props) => (props.width)}px;\n\n`\nconst InnerWrapper = styled.div`\n    height: ${(props) => (props.height)}px;\n    width: ${props => parseInt(props.width * (props.percent / 100), 10)}px;    \n    background-color: ${props => props.percent === 100 ? \"green\" : (props.percent > 50 ? 'lightgreen' : 'red')};\n`\n\nconst ProgressBar = (props) => (\n    <OuterWrapper {...props}>\n        <InnerWrapper {...props}></InnerWrapper>\n    </OuterWrapper>\n)\n\n\n\nProgressBar.propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n\n    /** Bar height */\n    height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n    height: 5\n};\n\nexport default ProgressBar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export {default} from './RegistrationForm';\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\n\nconst RegistrationForm = (props) => {\n\n  const [user, setUser] = useState({ email: '', password: '' });\n  const [errors, setErrors] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n\n  const onChange = (event) => {\n    setUser({ ...user, [event.target.name]: event.target.value });\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  const passwordQuality = (password) => {\n    if (!password) return null;\n    if (password.length >= props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length / props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  const validate = ({ email, password }) => {\n    const formErrors = {};\n    const { minPasswordLength } = props;\n\n    if (!email) formErrors.email = 'Email required.';\n    if (password.length < minPasswordLength) formErrors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    setErrors(formErrors);\n    const formIsValid = Object.getOwnPropertyNames(formErrors).length === 0;\n    return formIsValid;\n  }\n\n  const onSubmit = () => {\n    const formIsValid = validate(user);\n    if (formIsValid) {\n      props.onSubmit(user);\n      setSubmitted(true);\n    }\n  }\n\n  return (\n    submitted ?\n      <h2>{props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={onChange}\n          label=\"Email\"\n          value={user.email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={user.password}\n          onChange={onChange}\n          quality={passwordQuality(user.password)}\n          showVisibilityToggle={true}\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={onSubmit} />\n      </div>\n  )\n}\n\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nconst PropsTable = styled.table`\n  tr td:last-of-type {\n    text-align: center;\n  }\n  th, td {\n    text-align: left;\n    padding: 5px;\n  }\n`\n\n\nconst Props = ({ props }) => {\n  return (\n    <PropsTable>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          Object.keys(props).map(key => {\n            return (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{props[key].description}</td>\n                <td>{props[key].type.name}</td>\n                <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n                <td>{props[key].required && \"X\"}</td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </PropsTable>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","module.exports = [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\\n\",\"examples\":[{\"name\":\"Example\",\"description\":\"EyeIcon example\",\"code\":\"import React from 'react';\\nimport EyeIcon from 'bjorn-comps/EyeIcon'\\n\\n/** EyeIcon example */\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A Descriotion\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"\\\"Howdy\\\"\",\"computed\":false}}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\n\\n/**\\n * A Descriotion\\n */\\nexport default function HelloWorld({ message }) {\\n    return (\\n        <div>\\n            {message}\\n        </div>\\n    )\\n}\\n\\nHelloWorld.propTypes = {\\n    /**\\n     * Message to display\\n     */\\n    message: PropTypes.string\\n}\\n\\nHelloWorld.defaultProps = {\\n    message: \\\"Howdy\\\"\\n}\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"\",\"code\":\"import React from 'react'\\nimport HelloWorld from \\\"bjorn-comps/HelloWorld\\\"\\n\\nexport default function ExampleHelloWorld() {\\n    return (\\n        <HelloWorld message=\\\"Hello there!\\\" />\\n    )\\n}\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from \\\"styled-components\\\"\\n\\nconst StyledLabel = styled.label`\\n    display: block;\\n    color: ${props => props.theme.mainColor || 'black'};\\n`\\nconst RequiredSpan = styled.span`\\n    color: red;\\n`\\n\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({ htmlFor, label, required }) {\\n    return (\\n        <StyledLabel htmlFor={htmlFor}>\\n            {label} {required && <RequiredSpan> *</RequiredSpan>}\\n        </StyledLabel>\\n    )\\n}\\n\\nLabel.propTypes = {\\n    /** HTML ID for associated input */\\n    htmlFor: PropTypes.string.isRequired,\\n\\n    /** Label text */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Display asterisk after label if true */\\n    required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\nimport Label from 'bjorn-comps/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react';\\nimport Label from 'bjorn-comps/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\\n\"},{\"name\":\"ExampleThemed\",\"description\":\"With theme color provided\",\"code\":\"import React from 'react';\\nimport { ThemeProvider } from \\\"styled-components\\\"\\nimport Label from 'bjorn-comps/Label';\\n\\nconst blueTheme = {\\n  mainColor: \\\"blue\\\",\\n}\\nconst greenTheme = {\\n  mainColor: \\\"green\\\",\\n}\\n\\n/** With theme color provided */\\nexport default function ExampleOptional() {\\n  return (\\n    <>\\n      <ThemeProvider theme={blueTheme}>\\n        <Label htmlFor=\\\"test\\\" label=\\\"Blue theme label\\\" />\\n      </ThemeProvider>\\n      <ThemeProvider theme={greenTheme}>\\n        <Label htmlFor=\\\"test2\\\" label=\\\"Green theme label\\\" />\\n      </ThemeProvider>\\n    </>\\n  )\\n}\\n\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nconst PasswordInput = props => {\\n\\n  const [showPassword, setShowPassword] = useState(false);\\n\\n  const toggleShowPassword = event => {\\n    setShowPassword(!showPassword);\\n    if (event) event.preventDefault();\\n  };\\n\\n\\n  const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...rest } = props;\\n\\n\\n  return (\\n\\n    <TextInput\\n      htmlId={htmlId}\\n      label={label}\\n      placeholder={placeholder}\\n      type={showPassword ? 'text' : 'password'}\\n      onChange={onChange}\\n      value={value}\\n      maxLength={maxLength}\\n      error={error}\\n      required\\n      {...rest}>\\n      {\\n        showVisibilityToggle &&\\n        <a\\n          href=\\\"#\\\"\\n          onClick={toggleShowPassword}\\n          style={{ marginLeft: 5 }}>\\n          <EyeIcon />\\n        </a>\\n      }\\n      {\\n        value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n      }\\n    </TextInput>\\n  );\\n\\n}\\n\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React, { useState } from 'react';\\nimport PasswordInput from 'bjorn-comps/PasswordInput';\\n\\n/** All features enabled */\\nconst ExampleAllFeatures = (props) => {\\n\\n  const [password, setPassword] = useState('');\\n\\n  const getQuality = () => {\\n    const length = password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n\\n  return (\\n    <div>\\n      <PasswordInput\\n        htmlId=\\\"password-input-example-all-features\\\"\\n        name=\\\"password\\\"\\n        onChange={event => setPassword(event.target.value)}\\n        value={password}\\n        minLength={8}\\n        placeholder=\\\"Enter password\\\"\\n        showVisibilityToggle\\n        quality={getQuality()}\\n        {...props} />\\n    </div>\\n  )\\n}\\n\\n\\nexport default ExampleAllFeatures;\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from \\\"styled-components\\\"\\n\\n\\nconst OuterWrapper = styled.div`\\n    border-style:solid;\\n    border-width:1px;\\n    border-color:black;\\n    width: ${(props) => (props.width)}px;\\n\\n`\\nconst InnerWrapper = styled.div`\\n    height: ${(props) => (props.height)}px;\\n    width: ${props => parseInt(props.width * (props.percent / 100), 10)}px;    \\n    background-color: ${props => props.percent === 100 ? \\\"green\\\" : (props.percent > 50 ? 'lightgreen' : 'red')};\\n`\\n\\nconst ProgressBar = (props) => (\\n    <OuterWrapper {...props}>\\n        <InnerWrapper {...props}></InnerWrapper>\\n    </OuterWrapper>\\n)\\n\\n\\n\\nProgressBar.propTypes = {\\n    /** Percent of progress completed */\\n    percent: PropTypes.number.isRequired,\\n\\n    /** Bar width */\\n    width: PropTypes.number.isRequired,\\n\\n    /** Bar height */\\n    height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n    height: 5\\n};\\n\\nexport default ProgressBar;\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"\",\"code\":\"import React from 'react'\\nimport ProgressBar from \\\"bjorn-comps/ProgressBar\\\"\\n\\nexport default function Example100Percent() {\\n    return (\\n        <ProgressBar percent={100} width={200} />\\n    )\\n}\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10 percent progress\",\"code\":\"import React from 'react'\\nimport ProgressBar from \\\"bjorn-comps/ProgressBar\\\"\\n\\n/** 10 percent progress */\\nexport default function Example10Percent() {\\n    return (\\n        <ProgressBar percent={10} width={200} heigth={20} />\\n    )\\n}\\n\"},{\"name\":\"Example70Percent\",\"description\":\"\",\"code\":\"import React from 'react'\\nimport ProgressBar from \\\"bjorn-comps/ProgressBar\\\"\\n\\nexport default function Example70Percent() {\\n    return (\\n        <ProgressBar percent={70} width={200} />\\n    )\\n}\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\n\\nconst RegistrationForm = (props) => {\\n\\n  const [user, setUser] = useState({ email: '', password: '' });\\n  const [errors, setErrors] = useState({});\\n  const [submitted, setSubmitted] = useState(false);\\n\\n  const onChange = (event) => {\\n    setUser({ ...user, [event.target.name]: event.target.value });\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  const passwordQuality = (password) => {\\n    if (!password) return null;\\n    if (password.length >= props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length / props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  const validate = ({ email, password }) => {\\n    const formErrors = {};\\n    const { minPasswordLength } = props;\\n\\n    if (!email) formErrors.email = 'Email required.';\\n    if (password.length < minPasswordLength) formErrors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    setErrors(formErrors);\\n    const formIsValid = Object.getOwnPropertyNames(formErrors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  const onSubmit = () => {\\n    const formIsValid = validate(user);\\n    if (formIsValid) {\\n      props.onSubmit(user);\\n      setSubmitted(true);\\n    }\\n  }\\n\\n  return (\\n    submitted ?\\n      <h2>{props.confirmationMessage}</h2> :\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={onChange}\\n          label=\\\"Email\\\"\\n          value={user.email}\\n          error={errors.email}\\n          required />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={user.password}\\n          onChange={onChange}\\n          quality={passwordQuality(user.password)}\\n          showVisibilityToggle={true}\\n          maxLength={50}\\n          error={errors.password} />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={onSubmit} />\\n      </div>\\n  )\\n}\\n\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport RegistrationForm from 'bjorn-comps/RegistrationForm';\\n\\nconst ExampleRegistrationForm = () => {\\n\\n  const onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  return <RegistrationForm onSubmit={onSubmit} />\\n}\\n\\nexport default ExampleRegistrationForm\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInput from 'bjorn-comps/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => { }}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    )\\n  }\\n}\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\nimport TextInput from 'bjorn-comps/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => { }}\\n      />\\n    )\\n  }\\n}\\n\"}]}]","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}