{"version":3,"sources":["components/Label/Label.js","components/TextInput/TextInput.js","components/ProgressBar/ProgressBar.js","components/PasswordInput/PasswordInput.js","components/EyeIcon/EyeIcon.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/Label/ExampleThemed.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["StyledLabel","styled","label","props","theme","mainColor","RequiredSpan","span","Label","htmlFor","required","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","style","marginBottom","id","border","className","color","OuterWrapper","div","width","InnerWrapper","height","parseInt","percent","ProgressBar","defaultProps","PasswordInput","useState","showPassword","setShowPassword","maxLength","showVisibilityToggle","quality","rest","href","onClick","event","preventDefault","marginLeft","EyeIcon","length","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","EyeIconExample","ExampleOptional","ExampleRequired","blueTheme","greenTheme","ExampleAllFeatures","password","setPassword","target","minLength","getQuality","Example100Percent","Example10Percent","heigth","Example70Percent","ExampleError","React","Component","HelloWorld","message","ExampleHelloWorld","RegistrationForm","email","user","setUser","errors","setErrors","submitted","setSubmitted","confirmationMessage","minPasswordLength","formErrors","Object","getOwnPropertyNames","validate","onSubmit","ExampleRegistrationForm","console","log","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve","Ul","ul","Navigation","components","key","CodeExample","element","useRef","useEffect","hljs","registerLanguage","javascript","highlightBlock","current","ref","ExampleWrapper","Example","example","componentName","showCode","setShowCode","description","ExampleComponent","require","default","PropsTable","table","Props","defaultValue","Wrapper","ComponentPage","component","examples","Docs","window","location","hash","substr","route","setRoute","addEventListener","componentData","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.84fa9989.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nconst StyledLabel = styled.label`\n    display: block;\n    color: ${props => props.theme.mainColor || 'black'};\n`\nconst RequiredSpan = styled.span`\n    color: red;\n`\n\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({ htmlFor, label, required }) {\n    return (\n        <StyledLabel htmlFor={htmlFor}>\n            {label} {required && <RequiredSpan> *</RequiredSpan>}\n        </StyledLabel>\n    )\n}\n\nLabel.propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n\n    /** Label text */\n    label: PropTypes.string.isRequired,\n\n    /** Display asterisk after label if true */\n    required: PropTypes.bool\n};\n\nexport default Label;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\n\nconst OuterWrapper = styled.div`\n    border-style:solid;\n    border-width:1px;\n    border-color:black;\n    width: ${(props) => (props.width)}px;\n\n`\nconst InnerWrapper = styled.div`\n    height: ${(props) => (props.height)}px;\n    width: ${props => parseInt(props.width * (props.percent / 100), 10)}px;    \n    background-color: ${props => props.percent === 100 ? \"green\" : (props.percent > 50 ? 'lightgreen' : 'red')};\n`\n\nconst ProgressBar = (props) => (\n    <OuterWrapper {...props}>\n        <InnerWrapper {...props}></InnerWrapper>\n    </OuterWrapper>\n)\n\n\n\nProgressBar.propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n\n    /** Bar height */\n    height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n    height: 5\n};\n\nexport default ProgressBar;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nconst PasswordInput = props => {\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = event => {\n    setShowPassword(!showPassword);\n    if (event) event.preventDefault();\n  };\n\n\n  const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...rest } = props;\n\n\n  return (\n\n    <TextInput\n      htmlId={htmlId}\n      label={label}\n      placeholder={placeholder}\n      type={showPassword ? 'text' : 'password'}\n      onChange={onChange}\n      value={value}\n      maxLength={maxLength}\n      error={error}\n      required\n      {...rest}>\n      {\n        showVisibilityToggle &&\n        <a\n          href=\"#\"\n          onClick={toggleShowPassword}\n          style={{ marginLeft: 5 }}>\n          <EyeIcon />\n        </a>\n      }\n      {\n        value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n      }\n    </TextInput>\n  );\n\n}\n\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","module.exports = [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\\n\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport EyeIcon from 'my-components/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A Descriotion\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"\\\"Howdy\\\"\",\"computed\":false}}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\n\\n/**\\n * A Descriotion\\n */\\nexport default function HelloWorld({ message }) {\\n    return (\\n        <div>\\n            {message}\\n        </div>\\n    )\\n}\\n\\nHelloWorld.propTypes = {\\n    /**\\n     * Message to display\\n     */\\n    message: PropTypes.string\\n}\\n\\nHelloWorld.defaultProps = {\\n    message: \\\"Howdy\\\"\\n}\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"\",\"code\":\"import React from 'react'\\nimport HelloWorld from \\\"my-components/HelloWorld\\\"\\n\\nexport default function ExampleHelloWorld() {\\n    return (\\n        <HelloWorld message=\\\"Hello there!\\\" />\\n    )\\n}\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from \\\"styled-components\\\"\\n\\nconst StyledLabel = styled.label`\\n    display: block;\\n    color: ${props => props.theme.mainColor || 'black'};\\n`\\nconst RequiredSpan = styled.span`\\n    color: red;\\n`\\n\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({ htmlFor, label, required }) {\\n    return (\\n        <StyledLabel htmlFor={htmlFor}>\\n            {label} {required && <RequiredSpan> *</RequiredSpan>}\\n        </StyledLabel>\\n    )\\n}\\n\\nLabel.propTypes = {\\n    /** HTML ID for associated input */\\n    htmlFor: PropTypes.string.isRequired,\\n\\n    /** Label text */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Display asterisk after label if true */\\n    required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\nimport Label from 'my-components/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react';\\nimport Label from 'my-components/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\\n\"},{\"name\":\"ExampleThemed\",\"description\":\"With theme color provided\",\"code\":\"import React from 'react';\\nimport { ThemeProvider } from \\\"styled-components\\\"\\nimport Label from 'my-components/Label';\\n\\nconst blueTheme = {\\n  mainColor: \\\"blue\\\",\\n}\\nconst greenTheme = {\\n  mainColor: \\\"green\\\",\\n}\\n\\n/** With theme color provided */\\nexport default function ExampleOptional() {\\n  return (\\n    <>\\n      <ThemeProvider theme={blueTheme}>\\n        <Label htmlFor=\\\"test\\\" label=\\\"Blue theme label\\\" />\\n      </ThemeProvider>\\n      <ThemeProvider theme={greenTheme}>\\n        <Label htmlFor=\\\"test2\\\" label=\\\"Green theme label\\\" />\\n      </ThemeProvider>\\n    </>\\n  )\\n}\\n\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nconst PasswordInput = props => {\\n\\n  const [showPassword, setShowPassword] = useState(false);\\n\\n  const toggleShowPassword = event => {\\n    setShowPassword(!showPassword);\\n    if (event) event.preventDefault();\\n  };\\n\\n\\n  const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...rest } = props;\\n\\n\\n  return (\\n\\n    <TextInput\\n      htmlId={htmlId}\\n      label={label}\\n      placeholder={placeholder}\\n      type={showPassword ? 'text' : 'password'}\\n      onChange={onChange}\\n      value={value}\\n      maxLength={maxLength}\\n      error={error}\\n      required\\n      {...rest}>\\n      {\\n        showVisibilityToggle &&\\n        <a\\n          href=\\\"#\\\"\\n          onClick={toggleShowPassword}\\n          style={{ marginLeft: 5 }}>\\n          <EyeIcon />\\n        </a>\\n      }\\n      {\\n        value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n      }\\n    </TextInput>\\n  );\\n\\n}\\n\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React, { useState } from 'react';\\nimport PasswordInput from 'my-components/PasswordInput';\\n\\n/** All features enabled */\\nconst ExampleAllFeatures = (props) => {\\n\\n  const [password, setPassword] = useState('');\\n\\n  const getQuality = () => {\\n    const length = password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n\\n  return (\\n    <div>\\n      <PasswordInput\\n        htmlId=\\\"password-input-example-all-features\\\"\\n        name=\\\"password\\\"\\n        onChange={event => setPassword(event.target.value)}\\n        value={password}\\n        minLength={8}\\n        placeholder=\\\"Enter password\\\"\\n        showVisibilityToggle\\n        quality={getQuality()}\\n        {...props} />\\n    </div>\\n  )\\n}\\n\\n\\nexport default ExampleAllFeatures;\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from \\\"styled-components\\\"\\n\\n\\nconst OuterWrapper = styled.div`\\n    border-style:solid;\\n    border-width:1px;\\n    border-color:black;\\n    width: ${(props) => (props.width)}px;\\n\\n`\\nconst InnerWrapper = styled.div`\\n    height: ${(props) => (props.height)}px;\\n    width: ${props => parseInt(props.width * (props.percent / 100), 10)}px;    \\n    background-color: ${props => props.percent === 100 ? \\\"green\\\" : (props.percent > 50 ? 'lightgreen' : 'red')};\\n`\\n\\nconst ProgressBar = (props) => (\\n    <OuterWrapper {...props}>\\n        <InnerWrapper {...props}></InnerWrapper>\\n    </OuterWrapper>\\n)\\n\\n\\n\\nProgressBar.propTypes = {\\n    /** Percent of progress completed */\\n    percent: PropTypes.number.isRequired,\\n\\n    /** Bar width */\\n    width: PropTypes.number.isRequired,\\n\\n    /** Bar height */\\n    height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n    height: 5\\n};\\n\\nexport default ProgressBar;\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"\",\"code\":\"import React from 'react'\\nimport ProgressBar from \\\"my-components/ProgressBar\\\"\\n\\nexport default function Example100Percent() {\\n    return (\\n        <ProgressBar percent={100} width={200} />\\n    )\\n}\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10 percent progress\",\"code\":\"import React from 'react'\\nimport ProgressBar from \\\"my-components/ProgressBar\\\"\\n\\n/** 10 percent progress */\\nexport default function Example10Percent() {\\n    return (\\n        <ProgressBar percent={10} width={200} heigth={20} />\\n    )\\n}\\n\"},{\"name\":\"Example70Percent\",\"description\":\"\",\"code\":\"import React from 'react'\\nimport ProgressBar from \\\"my-components/ProgressBar\\\"\\n\\nexport default function Example70Percent() {\\n    return (\\n        <ProgressBar percent={70} width={200} />\\n    )\\n}\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\n\\nconst RegistrationForm = (props) => {\\n\\n  const [user, setUser] = useState({ email: '', password: '' });\\n  const [errors, setErrors] = useState({});\\n  const [submitted, setSubmitted] = useState(false);\\n\\n  const onChange = (event) => {\\n    setUser({ ...user, [event.target.name]: event.target.value });\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  const passwordQuality = (password) => {\\n    if (!password) return null;\\n    if (password.length >= props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length / props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  const validate = ({ email, password }) => {\\n    const formErrors = {};\\n    const { minPasswordLength } = props;\\n\\n    if (!email) formErrors.email = 'Email required.';\\n    if (password.length < minPasswordLength) formErrors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    setErrors(formErrors);\\n    const formIsValid = Object.getOwnPropertyNames(formErrors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  const onSubmit = () => {\\n    const formIsValid = validate(user);\\n    if (formIsValid) {\\n      props.onSubmit(user);\\n      setSubmitted(true);\\n    }\\n  }\\n\\n  return (\\n    submitted ?\\n      <h2>{props.confirmationMessage}</h2> :\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={onChange}\\n          label=\\\"Email\\\"\\n          value={user.email}\\n          error={errors.email}\\n          required />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={user.password}\\n          onChange={onChange}\\n          quality={passwordQuality(user.password)}\\n          showVisibilityToggle={true}\\n          maxLength={50}\\n          error={errors.password} />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={onSubmit} />\\n      </div>\\n  )\\n}\\n\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport RegistrationForm from 'my-components/RegistrationForm';\\n\\nconst ExampleRegistrationForm = () => {\\n\\n  const onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  return <RegistrationForm onSubmit={onSubmit} />\\n}\\n\\nexport default ExampleRegistrationForm\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInput from 'my-components/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => { }}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    )\\n  }\\n}\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\nimport TextInput from 'my-components/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => { }}\\n      />\\n    )\\n  }\\n}\\n\"}]}]","import React from 'react';\nimport EyeIcon from 'my-components/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from 'react';\nimport Label from 'my-components/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n","import React from 'react';\nimport Label from 'my-components/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}\n","import React from 'react';\nimport { ThemeProvider } from \"styled-components\"\nimport Label from 'my-components/Label';\n\nconst blueTheme = {\n  mainColor: \"blue\",\n}\nconst greenTheme = {\n  mainColor: \"green\",\n}\n\n/** With theme color provided */\nexport default function ExampleOptional() {\n  return (\n    <>\n      <ThemeProvider theme={blueTheme}>\n        <Label htmlFor=\"test\" label=\"Blue theme label\" />\n      </ThemeProvider>\n      <ThemeProvider theme={greenTheme}>\n        <Label htmlFor=\"test2\" label=\"Green theme label\" />\n      </ThemeProvider>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport PasswordInput from 'my-components/PasswordInput';\n\n/** All features enabled */\nconst ExampleAllFeatures = (props) => {\n\n  const [password, setPassword] = useState('');\n\n  const getQuality = () => {\n    const length = password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n\n  return (\n    <div>\n      <PasswordInput\n        htmlId=\"password-input-example-all-features\"\n        name=\"password\"\n        onChange={event => setPassword(event.target.value)}\n        value={password}\n        minLength={8}\n        placeholder=\"Enter password\"\n        showVisibilityToggle\n        quality={getQuality()}\n        {...props} />\n    </div>\n  )\n}\n\n\nexport default ExampleAllFeatures;\n","import React from 'react'\nimport ProgressBar from \"my-components/ProgressBar\"\n\nexport default function Example100Percent() {\n    return (\n        <ProgressBar percent={100} width={200} />\n    )\n}\n","import React from 'react'\nimport ProgressBar from \"my-components/ProgressBar\"\n\n/** 10 percent progress */\nexport default function Example10Percent() {\n    return (\n        <ProgressBar percent={10} width={200} heigth={20} />\n    )\n}\n","import React from 'react'\nimport ProgressBar from \"my-components/ProgressBar\"\n\nexport default function Example70Percent() {\n    return (\n        <ProgressBar percent={70} width={200} />\n    )\n}\n","import React from 'react';\nimport TextInput from 'my-components/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => { }}\n        required\n        error=\"First name is required.\"\n      />\n    )\n  }\n}\n","import React from 'react';\nimport TextInput from 'my-components/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => { }}\n      />\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * A Descriotion\n */\nexport default function HelloWorld({ message }) {\n    return (\n        <div>\n            {message}\n        </div>\n    )\n}\n\nHelloWorld.propTypes = {\n    /**\n     * Message to display\n     */\n    message: PropTypes.string\n}\n\nHelloWorld.defaultProps = {\n    message: \"Howdy\"\n}","import React from 'react'\nimport HelloWorld from \"my-components/HelloWorld\"\n\nexport default function ExampleHelloWorld() {\n    return (\n        <HelloWorld message=\"Hello there!\" />\n    )\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\n\nconst RegistrationForm = (props) => {\n\n  const [user, setUser] = useState({ email: '', password: '' });\n  const [errors, setErrors] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n\n  const onChange = (event) => {\n    setUser({ ...user, [event.target.name]: event.target.value });\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  const passwordQuality = (password) => {\n    if (!password) return null;\n    if (password.length >= props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length / props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  const validate = ({ email, password }) => {\n    const formErrors = {};\n    const { minPasswordLength } = props;\n\n    if (!email) formErrors.email = 'Email required.';\n    if (password.length < minPasswordLength) formErrors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    setErrors(formErrors);\n    const formIsValid = Object.getOwnPropertyNames(formErrors).length === 0;\n    return formIsValid;\n  }\n\n  const onSubmit = () => {\n    const formIsValid = validate(user);\n    if (formIsValid) {\n      props.onSubmit(user);\n      setSubmitted(true);\n    }\n  }\n\n  return (\n    submitted ?\n      <h2>{props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={onChange}\n          label=\"Email\"\n          value={user.email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={user.password}\n          onChange={onChange}\n          quality={passwordQuality(user.password)}\n          showVisibilityToggle={true}\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={onSubmit} />\n      </div>\n  )\n}\n\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'my-components/RegistrationForm';\n\nconst ExampleRegistrationForm = () => {\n\n  const onSubmit = (user) => {\n    console.log(user);\n  }\n\n  return <RegistrationForm onSubmit={onSubmit} />\n}\n\nexport default ExampleRegistrationForm","var map = {\n\t\"./EyeIcon/Example\": 23,\n\t\"./EyeIcon/Example.js\": 23,\n\t\"./HelloWorld/ExampleHelloWorld\": 33,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 33,\n\t\"./Label/ExampleOptional\": 24,\n\t\"./Label/ExampleOptional.js\": 24,\n\t\"./Label/ExampleRequired\": 25,\n\t\"./Label/ExampleRequired.js\": 25,\n\t\"./Label/ExampleThemed\": 26,\n\t\"./Label/ExampleThemed.js\": 26,\n\t\"./PasswordInput/ExampleAllFeatures\": 27,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 27,\n\t\"./ProgressBar/Example100Percent\": 28,\n\t\"./ProgressBar/Example100Percent.js\": 28,\n\t\"./ProgressBar/Example10Percent\": 29,\n\t\"./ProgressBar/Example10Percent.js\": 29,\n\t\"./ProgressBar/Example70Percent\": 30,\n\t\"./ProgressBar/Example70Percent.js\": 30,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 34,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 34,\n\t\"./TextInput/ExampleError\": 31,\n\t\"./TextInput/ExampleError.js\": 31,\n\t\"./TextInput/ExampleOptional\": 32,\n\t\"./TextInput/ExampleOptional.js\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 67;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nconst Ul = styled.ul`\n  float: left;\n  width: 250px;\n  list-style-type: none;\n  padding: 0;\n`\n\nconst Navigation = ({ components }) => {\n  return (\n    <Ul>\n      {\n        components.map(name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </Ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/core'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nconst CodeExample = (props) => {\n\n  const element = useRef(null)\n\n  useEffect(() => {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(element.current);\n\n  }, [])\n\n\n  return (\n    <pre ref={element}>\n      <code>\n        {props.children}\n      </code>\n    </pre>\n  )\n\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nimport CodeExample from './CodeExample';\n\nconst ExampleWrapper = styled.div`\n  border: solid 1px #d3d3d3;\n  padding: 16px;\n  margin-bottom: 16px;\n  background-color: #f4f6f9;\n  h4:first-of-type {\n    margin-top: 0;\n  }\n  p:last-of-type {\n    margin-bottom: 0;\n  }\n`\n\n\nconst Example = ({ example, componentName }) => {\n\n  const [showCode, setShowCode] = useState(false);\n\n  const toggleCode = event => {\n    event.preventDefault();\n    setShowCode(!showCode);\n  }\n\n  const { code, description, name } = example;\n\n  // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n  const ExampleComponent = require(`./examples/${componentName}/${name}`).default;\n\n  return (\n    <ExampleWrapper>\n      {description && <h4>{description}</h4>}\n\n      <ExampleComponent />\n\n      <p>\n        <button onClick={toggleCode}>\n          {showCode ? \"Hide\" : \"Show\"} Code\n          </button>\n      </p>\n\n      {showCode && <CodeExample>{code}</CodeExample>}\n    </ExampleWrapper>\n  )\n\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nconst PropsTable = styled.table`\n  tr td:last-of-type {\n    text-align: center;\n  }\n  th, td {\n    text-align: left;\n    padding: 5px;\n  }\n`\n\n\nconst Props = ({ props }) => {\n  return (\n    <PropsTable>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          Object.keys(props).map(key => {\n            return (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{props[key].description}</td>\n                <td>{props[key].type.name}</td>\n                <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n                <td>{props[key].required && \"X\"}</td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </PropsTable>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\"\n\nimport Example from './Example';\nimport Props from './Props';\n\nconst Wrapper = styled.div`\n  margin-left: 275px;\n`\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <Wrapper>\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n          examples.map(example => <Example key={example.name} example={example} componentName={name} />) :\n          \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n          <Props props={props} /> :\n          \"This component accepts no props.\"\n      }\n    </Wrapper>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React, { useState, useEffect } from 'react'\n\nimport Navigation from \"./Navigation\"\nimport ComponentPage from \"./ComponentPage\"\nimport componentData from '../../config/componentData';\n\nexport default function Docs() {\n\n    const [route, setRoute] = useState(window.location.hash.substr(1))\n\n    useEffect(() => {\n        window.addEventListener('hashchange', () => {\n            setRoute(window.location.hash.substr(1));\n        })\n    }, [])\n\n    const component = route ? componentData.filter(component => component.name === route)[0] : componentData[0];\n\n    return (\n        <div>\n            <Navigation components={componentData.map(component => component.name)} />\n            <ComponentPage component={component} />\n\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/highlight.js/styles/ocean.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}